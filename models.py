from google.appengine.ext import db
from settings import render_str

from utils import (
    make_secure_val, check_secure_val,
    make_salt, make_pw_hash, valid_pw, secret)

class User(db.Model):
    '''
    Model representing user.
    Attributes:
        username (string): selected by user unique username
        pw_hash (string): hashed password
        email (string): optional provided email
    '''

    username = db.StringProperty(required = True)
    pw_hash = db.StringProperty(required = True)
    email = db.StringProperty(required = False)

    @classmethod
    def get_by_username(cls, username):
        '''select user from database with given username'''
        u = cls.all().filter('username =', str(username)).get()
        return u

    @classmethod
    def register(cls, username, password, email = None):
        '''
            make password hash,
            create instance of class with given parameters
        '''
        pw_hash = make_pw_hash(username, password)
        return cls(username = username,
                    pw_hash = pw_hash,
                    email = email)

    @classmethod
    def login(cls, username, password):
        '''
            check that data provided for logging in is correct
            and return user if exists
        '''
        if username is None or password is None:
            return None
        user = cls.get_by_username(username)
        if user and valid_pw(username, password, user.pw_hash):
            return user
        return None


class Post(db.Model):
    '''
    Post model.
    Attributes:
        subject (string): title for the post
        content (text): the post itself
        created (datetime): autogenerated field,
            post creation datetime
        last_modified (datetime): autogenerated field,
            post last modified datetime
        author (foreign key to User): user created post
    '''

    subject = db.StringProperty(required = True)
    content = db.TextProperty(required = True)
    created = db.DateTimeProperty(auto_now_add = True)
    last_modified = db.DateTimeProperty(auto_now = True)
    author = db.ReferenceProperty(User)

    def liked(self, user):
        ''' check if user provided as argument liked this post'''
        return any([like.user.key().id() == user.key().id()
                    for like in self.like_set])

    def render(self, user = None):
        '''render post template'''
        return render_str("post.html", post = self, user = user)


class Like(db.Model):
    '''
    Model representing liking post by user
    Attributes:
        user (foreign key to User): user who liked post
        post (foreign key to Post): post that was liked
        created (datetime): autogenerated field,
            like creation datetime
    '''
    user = db.ReferenceProperty(User)
    post = db.ReferenceProperty(Post)
    created = db.DateTimeProperty(auto_now_add = True)

class Comment(db.Model):
    '''
    Model representing commenting on post by user
    Attributes:
        user (foreign key to User): user who commented on post
        post (foreign key to Post): post that was commented
        comment (text): comment itself
        created (datetime): autogenerated field,
            comment creation datetime
        last_modified (datetime): autogenerated field,
            comment last modified datetime
    '''
    user = db.ReferenceProperty(User)
    post = db.ReferenceProperty(Post)
    comment = db.TextProperty(required=True)
    created = db.DateTimeProperty(auto_now_add = True)
    last_modified = db.DateTimeProperty(auto_now = True)

    def render(self, user = None):
        '''rendeer comment template'''
        return render_str("comment.html", comment = self, user = user)

    def render_form(self):
        '''rendeer comment form template'''
        return render_str("newcomment.html", comment = self)
